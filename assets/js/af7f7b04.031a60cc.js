"use strict";(self.webpackChunkgw_2_pathing_wiki=self.webpackChunkgw_2_pathing_wiki||[]).push([[6086],{4936:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=r(4848),n=r(8453);const a={id:"exploring-attributes",title:"Exploring Script Attributes",hide_table_of_contents:!0},s=void 0,o={id:"lua-scripting/lua-tutorials/exploring-attributes",title:"Exploring Script Attributes",description:"Let's start by exploring how we can use script attributes to execute our scripts. I'd recommend reading through the linked section in the Pathing API for an overview and then coming back.",source:"@site/docs/lua-scripting/lua-tutorials/exploring-attributes.mdx",sourceDirName:"lua-scripting/lua-tutorials",slug:"/lua-scripting/lua-tutorials/exploring-attributes",permalink:"/docs/lua-scripting/lua-tutorials/exploring-attributes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"exploring-attributes",title:"Exploring Script Attributes",hide_table_of_contents:!0},sidebar:"marker-dev-sidebar",previous:{title:"Getting Started",permalink:"/docs/lua-scripting/lua-tutorials/getting-started"},next:{title:"Using Globals and Types",permalink:"/docs/lua-scripting/lua-tutorials/using-the-api"}},c={},u=[];function l(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Let's start by exploring how we can use ",(0,i.jsx)(t.a,{href:"/docs/lua-scripting/lua-lib/api_intro#script-attributes",children:"script attributes"})," to execute our scripts. I'd recommend reading through the linked section in the Pathing API for an overview and then coming back."]}),"\n",(0,i.jsx)(t.p,{children:"We'll start by creating a simple script that prints a message to the console when the player triggers one of our markers, similar to the example on the overview page."}),"\n",(0,i.jsxs)(t.p,{children:["For this, we'll be using the ",(0,i.jsx)(t.a,{href:"/docs/lua-scripting/lua-script-attr/script-trigger",children:(0,i.jsx)(t.code,{children:"script-trigger"})})," attribute. Feel free to open that in a new window for reference."]}),"\n",(0,i.jsxs)(t.p,{children:["That particular attribute has two default parameters, ",(0,i.jsx)(t.code,{children:"marker"})," and ",(0,i.jsx)(t.code,{children:"isAutoTrigger"}),". For now, we'll just focus on using the ",(0,i.jsx)(t.code,{children:"isAutoTrigger"})," parameter."]}),"\n",(0,i.jsxs)(t.p,{children:["Let's start by creating a new function to use with ",(0,i.jsx)(t.code,{children:"script-trigger"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"It's recommended to prefix your global functions with a unique identifier to avoid conflicts with other scripts that might use similar naming schemes."})}),"\n",(0,i.jsxs)(t.p,{children:["Let's create a new script in your ",(0,i.jsx)(t.code,{children:"/Scripts"})," folder named ",(0,i.jsx)(t.code,{children:"TriggerFunction.lua"})," and add a require for it in your ",(0,i.jsx)(t.code,{children:"pack.lua"}),", like so:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",metastring:'title="pack.lua"',children:'Example = {}\n\n-- Add a require for our new script\nPack:Require("/Data/ExamplePack/Scripts/TriggerFunction.lua")\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Now, let's add a simple function to ",(0,i.jsx)(t.code,{children:"TriggerFunction.lua"})," that prints a message to the console when it's called."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-lua",metastring:'title="/Data/ExamplePack/Scripts/TriggerFunction.lua"',children:'-- Notice that we\'re using the `marker` and `isAutoTrigger` parameters here, followed by our own parameter `customInput`.\nfunction EP_TriggerFunction(marker, isAutoTrigger, customInput)\n    -- Here we use the `isAutoTrigger` parameter to determine if the trigger was automatic or manual.\n    if isAutoTrigger then\n        print("Auto trigger activated! Custom input: " .. customInput)\n    else\n        print("Manual trigger activated! Custom input: " .. customInput)\n    end\nend\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The last piece of the puzzle is to add the ",(0,i.jsx)(t.code,{children:"script-trigger"})," attribute to one (or several) of our markers."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",metastring:'title="ExamplePack.xml"',children:'<POI ... script-trigger="EP_TriggerFunction(1)">\n<POI ... script-trigger="EP_TriggerFunction(2)" triggerRange="20" autoTrigger="1">\n'})}),"\n",(0,i.jsx)(t.p,{children:'Now, we can go in-game and test our new function. When you go up and manually trigger the first marker, you should see the message "Manual trigger activated! Custom input: 1" in the console. When you get close to the second marker, you should see the message "Auto trigger activated! Custom input: 2" in the console.'}),"\n",(0,i.jsxs)(t.p,{children:["That's all it takes to use a script attribute! There are 5 script-attributes that you can use in a similar fashion to this, you can find more information about them in the ",(0,i.jsx)(t.a,{href:"/docs/lua-scripting/lua-lib/api_intro#script-attributes",children:"Pathing API Docs"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>o});var i=r(6540);const n={},a=i.createContext(n);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);